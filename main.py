from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.types import BufferedInputFile
import asyncio
import buttons
import plots
import tokens
from db import DataBase
from pomodoro import Pomodoro
from timer import Timer

db = DataBase('pomodoro.db')
bot = Bot(tokens.TG_BOT)
dp = Dispatcher()
last_chat_id = None

pomodoro_sessions = {}
timers = {}


async def send_info_stats(user_id: int, chat_id: int):
    sessions = db.get_numbers_of_sessions(user_id)
    minutes = db.get_numbers_of_minutes(user_id)
    if sessions is None:
        await bot.send_message(chat_id, '–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π üçÖ')
    else:
        await bot.send_message(chat_id, f'–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π Pomodoro: {sessions} üçÖ\n–í—Å–µ–≥–æ –º–∏–Ω—É—Ç —Ä–∞–±–æ—Ç—ã: {minutes} ‚åõ')


async def send_weekly_stats(user_id: int, chat_id: int):
    result = db.get_stats_per_week(user_id)
    if result:
        buf = plots.send_weekly_plot(result)
        photo_input_file = BufferedInputFile(buf.read(), filename="tmp.png")
        await bot.send_photo(chat_id, photo=photo_input_file)
        buf.close()
    else:
        await bot.send_message(chat_id, '–ü–æ–∫–∞ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–∫—Ä—ã—Ç–æ–π –ø–æ–º–∏–¥–æ—Ä–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é üçÖ')


async def send_hourly_stats(user_id: int, chat_id: int):
    result = db.get_stats_per_hour(user_id)
    if result:
        buf = plots.send_hourly_plot(result)
        photo_input_file = BufferedInputFile(buf.read(), filename="tmp.png")
        await bot.send_photo(chat_id, photo=photo_input_file)
        buf.close()
    else:
        await bot.send_message(chat_id, '–ü–æ–∫–∞ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–∫—Ä—ã—Ç–æ–π –ø–æ–º–∏–¥–æ—Ä–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è üçÖ')


async def end_timer(user_id: int, chat_id: int, minutes: int):
    await bot.send_message(chat_id, f"–í–∞—à —Ç–∞–π–º–µ—Ä –Ω–∞ {minutes} –º–∏–Ω—É—Ç –∑–∞–∫–æ–Ω—á–∏–ª—Å—è‚ùó")
    db.update_stats(user_id, minutes)
    db.update_timer_state(user_id, 0)
    del timers[user_id]


async def end_sprint(user_id: int, chat_id: int, minutes: int, cycles: int):
    await bot.send_message(chat_id, f"–°–ø—Ä–∏–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! üéâ +{minutes * cycles} –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã—Ö –º–∏–Ω—É—Ç")
    db.update_stats(user_id, minutes)
    db.update_timer_state(user_id, 0)
    del pomodoro_sessions[user_id]


async def end_pomodoro(user_id: int, chat_id: int, minutes: int):
    await bot.send_message(chat_id, "–ü–æ–º–æ–¥–æ—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω ‚úÖ –ù–µ–º–Ω–æ–≥–æ –æ—Ç–¥–æ—Ö–Ω–∏—Ç–µ")
    db.update_stats(user_id, minutes)


async def end_break(chat_id: int):
    await bot.send_message(chat_id, "–ü–µ—Ä–µ—Ä—ã–≤ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è‚ùó")


@dp.message(Command("start"))
async def start(message: types.Message):
    global last_chat_id
    last_chat_id = message.chat.id
    if not db.user_exists(message.from_user.id):
        db.add_user(message.from_user.id)
    await bot.send_message(message.chat.id, buttons.START_PROMPT)
    await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É üîΩ', reply_markup=buttons.start())


@dp.message(Command("menu"))
async def menu(message: types.Message):
    global last_chat_id
    last_chat_id = message.chat.id
    await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É üîΩ', reply_markup=buttons.start())


async def stats(message: types.Message):
    global last_chat_id
    last_chat_id = message.chat.id
    await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ üîΩ", reply_markup=buttons.stats())


@dp.message(Command("test_error"))
async def test_error(message: types.Message):
    global last_chat_id
    last_chat_id = message.chat.id
    raise ValueError("—Ç–µ—Å—Ç–æ–≤–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ")


@dp.message()
async def handle_text(message: types.Message):
    global last_chat_id
    last_chat_id = message.chat.id
    if message.text == '–ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä ‚è≤Ô∏è':
        await pomodoro(message)
    elif message.text == '–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É üìä':
        await stats(message)
    elif message.text == '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–ø—Ä–∏–Ω—Ç üöÄ':
        await sprint(message)
    elif message.text == '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–ø—Ä–∏–Ω—Ç ‚öôÔ∏è':
        await settings(message)
    else:
        await bot.send_message(message.from_user.id, '–¢–∞–∫–æ–≥–æ —è, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–º–µ—é ‚ùå')


async def settings(message: types.Message):
    global msg_with_settings
    global last_chat_id
    last_chat_id = message.chat.id
    minutes, short_break, long_break, cycles = db.get_user_settings(message.from_user.id)
    msg_with_settings = await bot.send_message(message.chat.id,
                                               f"–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ üõ†\n\n"
                                               f"–†–∞–±–æ—Ç–∞ üíº = {minutes} –º–∏–Ω—É—Ç\n"
                                               f"–ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤ ‚è≥ = {short_break} –º–∏–Ω—É—Ç\n"
                                               f"–î–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤ ‚òïÔ∏è = {long_break} –º–∏–Ω—É—Ç\n"
                                               f"–ö–æ–ª-–≤–æ —Ü–∏–∫–ª–æ–≤ üçÖ = {cycles}",
                                               reply_markup=buttons.settings())


async def updated_settings(msg_with_settings, user_id):
    minutes, short_break, long_break, cycles = db.get_user_settings(user_id)
    await bot.edit_message_text(chat_id=msg_with_settings.chat.id, message_id=msg_with_settings.message_id,
                                text=f"–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ üõ†\n\n"
                                     f"–†–∞–±–æ—Ç–∞ üíº = {minutes} –º–∏–Ω—É—Ç\n"
                                     f"–ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤ ‚è≥ = {short_break} –º–∏–Ω—É—Ç\n"
                                     f"–î–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤ ‚òïÔ∏è = {long_break} –º–∏–Ω—É—Ç\n"
                                     f"–ö–æ–ª-–≤–æ —Ü–∏–∫–ª–æ–≤ üçÖ = {cycles}",
                                reply_markup=buttons.settings())


async def pomodoro(message: types.Message):
    global last_chat_id
    last_chat_id = message.chat.id
    user_id = message.from_user.id

    if db.get_timer_state(user_id):
        await bot.send_message(message.chat.id, "–£ –≤–∞—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω —Ç–∞–π–º–µ—Ä. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ‚è∞")
        return

    await bot.send_message(message.from_user.id, "–ù–∞ —Å–∫–æ–ª—å–∫–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä? ‚è∞", reply_markup=buttons.pomodoro())


async def sprint(message: types.Message):
    global message_to_edit
    global last_chat_id
    last_chat_id = message.chat.id
    if db.get_timer_state(message.from_user.id):
        await bot.send_message(message.chat.id, "–í—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ —Å–ø—Ä–∏–Ω—Ç/—Ç–∞–π–º–µ—Ä ‚è∞\n–î–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
        return
    else:
        db.update_timer_state(message.chat.id, 1)
    minutes, short_break, long_break, cycles = db.get_user_settings(message.from_user.id)
    message_to_edit = await bot.send_message(message.from_user.id,
                                             f"–°–ø—Ä–∏–Ω—Ç –Ω–∞ {cycles} —Ü–∏–∫–ª–∞ –∫–∞–∂–¥—ã–π –ø–æ {minutes} –º–∏–Ω—É—Ç –∑–∞–ø—É—â–µ–Ω! üöÄ"
                                             , reply_markup=buttons.active_sprint())
    pomodoro_sessions[message.from_user.id] = Pomodoro(message.from_user.id, minutes, short_break, long_break, cycles,
                                                       lambda: end_pomodoro(message.from_user.id, message.chat.id,
                                                                            minutes),
                                                       lambda: end_break(message.chat.id),
                                                       lambda: end_sprint(message.from_user.id, message.chat.id,
                                                                          minutes, cycles))
    await pomodoro_sessions[message.from_user.id].start_pomodoro_session()


@dp.callback_query()
async def query_handler(call: types.CallbackQuery):
    global last_chat_id
    last_chat_id = call.message.chat.id
    global message_to_edit
    global msg_with_settings
    user_id = call.from_user.id
    if call.data.isdigit():  # –ï—Å–ª–∏ callback_data - —ç—Ç–æ —á–∏—Å–ª–æ, –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
        if db.get_timer_state(call.message.chat.id):
            await bot.send_message(call.message.chat.id, "–í—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ —Å–ø—Ä–∏–Ω—Ç/—Ç–∞–π–º–µ—Ä ‚è∞\n–î–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
            return
        else:
            db.update_timer_state(user_id, 1)
        duration = int(call.data)
        await bot.answer_callback_query(callback_query_id=call.id, text='–¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω!')
        message_to_edit = await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                                      text=f'–¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {duration} –º–∏–Ω—É—Ç ‚è∞',
                                                      reply_markup=buttons.active_timer())
        timers[user_id] = Timer(user_id, duration,
                                lambda: end_timer(user_id, call.message.chat.id, duration))
        await timers[user_id].start()

    elif call.data == 'info_stats':
        await send_info_stats(user_id, call.message.chat.id)
    elif call.data == 'weekly_stats':
        await send_weekly_stats(user_id, call.message.chat.id)
    elif call.data == 'hourly_stats':
        await send_hourly_stats(user_id, call.message.chat.id)
    elif call.data == 'time_left':
        if user_id in timers and timers[user_id].is_running():
            remaining_time = timers[user_id].get_remaining_time()
            await bot.answer_callback_query(callback_query_id=call.id, text=f'–û—Å—Ç–∞–ª–æ—Å—å {remaining_time} –º–∏–Ω. ‚è≥')
        else:
            await bot.answer_callback_query(callback_query_id=call.id, text="–£ –≤–∞—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω —Ç–∞–π–º–µ—Ä.")

    elif call.data == 'stop_timer':
        if user_id in timers:
            db.update_timer_state(user_id, 0)
            timers[user_id].cancel()
            del timers[user_id]
            await bot.send_message(call.message.chat.id, f'–¢–∞–π–º–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω‚õî')
        else:
            await bot.answer_callback_query(callback_query_id=call.id, text="–£ –≤–∞—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω —Ç–∞–π–º–µ—Ä.")
    elif call.data == 'sprint_left':
        if user_id in pomodoro_sessions:
            remaining_time = pomodoro_sessions[user_id].time_remaining()
            await bot.answer_callback_query(callback_query_id=call.id, text=f'–û—Å—Ç–∞–ª–æ—Å—å {remaining_time} –º–∏–Ω. ‚è≥')
        else:
            await bot.answer_callback_query(callback_query_id=call.id, text="–£ –≤–∞—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω —Å–ø—Ä–∏–Ω—Ç")

    elif call.data == 'stop_sprint':
        if user_id in pomodoro_sessions:
            db.update_timer_state(user_id, 0)
            pomodoro_sessions[user_id].stop_pomodoro_session()
            del pomodoro_sessions[user_id]
            await bot.send_message(call.message.chat.id, f'–°–ø—Ä–∏–Ω—Ç –æ—Ç–º–µ–Ω–µ–Ω‚õî')
        else:
            await bot.answer_callback_query(callback_query_id=call.id, text="–£ –≤–∞—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω —Å–ø—Ä–∏–Ω—Ç")

    if call.data == "plus_work":
        current_minutes, _, _, _ = db.get_user_settings(user_id)
        if current_minutes == 45:
            db.update_working_minutes(user_id, 5)
        else:
            db.update_working_minutes(user_id, current_minutes + 5)
        await updated_settings(msg_with_settings, user_id)

    elif call.data == "minus_work":
        current_minutes, _, _, _ = db.get_user_settings(user_id)
        if current_minutes == 5:
            db.update_working_minutes(user_id, 45)
        else:
            db.update_working_minutes(user_id, current_minutes - 5)
        await updated_settings(msg_with_settings, user_id)

    elif call.data == "plus_break":
        _, current_short_break, current_long_break, _ = db.get_user_settings(user_id)
        if current_short_break == 15:
            db.update_break_minutes(user_id, 5)
            db.update_long_break_minutes(user_id, 15)
        else:
            db.update_break_minutes(user_id, current_short_break + 5)
            db.update_long_break_minutes(user_id, current_long_break + 5 * 3)
        await updated_settings(msg_with_settings, user_id)

    elif call.data == "minus_break":
        _, current_short_break, current_long_break, _ = db.get_user_settings(user_id)
        if current_short_break == 5:
            db.update_break_minutes(user_id, 15)
            db.update_long_break_minutes(user_id, 45)
        else:
            db.update_break_minutes(user_id, current_short_break - 5)
            db.update_long_break_minutes(user_id, current_long_break - 5 * 3)
        await updated_settings(msg_with_settings, user_id)

    elif call.data == "plus_cycles":
        _, _, _, current_cycles = db.get_user_settings(user_id)
        if current_cycles == 4:
            db.update_number_of_cycles(user_id, 1)
        else:
            db.update_number_of_cycles(user_id, current_cycles + 1)
        await updated_settings(msg_with_settings, user_id)

    elif call.data == "minus_cycles":
        _, _, _, current_cycles = db.get_user_settings(user_id)
        if current_cycles == 1:
            db.update_number_of_cycles(user_id, 4)
        else:
            db.update_number_of_cycles(user_id, current_cycles - 1)
        await updated_settings(msg_with_settings, user_id)


async def main():
    try:
        db.reset_timer_state_for_all_users()
        await dp.start_polling(bot)
    except Exception as e:
        if last_chat_id is not None:
            chat_id = await bot.get_chat(last_chat_id).id
            await bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @fadeev16")
    finally:
        await bot.session.close()


if __name__ == '__main__':
    asyncio.run(main())
